{
	"info": {
		"_postman_id": "93a4c2c9-8987-4f34-b38e-0f545b4f1375",
		"name": "Pet Store API Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "14715660",
		"_collection_link": "https://winter-comet-556996.postman.co/workspace/0b88349b-d013-42b9-b30a-e66ed5b353a1/collection/14715660-93a4c2c9-8987-4f34-b38e-0f545b4f1375?action=share&source=collection_link&creator=14715660"
	},
	"item": [
		{
			"name": "CreateNewPetInDb",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(\"Using Pet ID:\", pm.environment.get(\"petId\"));\r",
							"console.log(\"Expected Pet Name:\", pm.environment.get(\"petName\"));\r",
							"\r",
							"// This is to Verify status the post status code is 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// This is for Parsing the  response\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// This is to ensure that the fetched Pet ID matches the stored one\r",
							"pm.test(\"Pet ID matches the stored one\", function () {\r",
							"    pm.expect(jsonData.id).to.eql(parseInt(pm.environment.get(\"randomPetId\")));\r",
							"});\r",
							"\r",
							"// This is to Ensure pet name matches the expected value\r",
							"pm.test(\"Pet name matches the expected value\", function () {\r",
							"    let expectedName = pm.environment.get(\"randomPetName\"); \r",
							"    pm.expect(jsonData.name).to.eql(expectedName);\r",
							"});\r",
							"\r",
							"// This is to Ensure pet status is valid\r",
							"pm.test(\"Pet status is either 'available', 'pending', or 'sold'\", function () {\r",
							"    const validStatuses = [\"available\", \"pending\", \"sold\"];\r",
							"    pm.expect(validStatuses).to.include(jsonData.status);\r",
							"});\r",
							"\r",
							"// This is to that Ensure category object exists with ID and name\r",
							"pm.test(\"Category details are present\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"category\");\r",
							"    pm.expect(jsonData.category).to.be.an(\"object\");\r",
							"    pm.expect(jsonData.category).to.have.property(\"id\");\r",
							"    pm.expect(jsonData.category).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"// This is to Ensure photo URLs exist and are valid\r",
							"pm.test(\"Photo URLs should be an array and contain valid URLs\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"photoUrls\");\r",
							"    pm.expect(jsonData.photoUrls).to.be.an(\"array\").that.is.not.empty;\r",
							"    jsonData.photoUrls.forEach(url => {\r",
							"        pm.expect(url).to.be.a(\"string\").and.match(/^https?:\\/\\/.+/);\r",
							"    });\r",
							"});\r",
							"\r",
							"console.log(\"Fetched Pet Name from API:\", jsonData.name);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Am Generating a random pet ID\r",
							"let randomPetId = Math.floor(Math.random() * 1000000) + 1;\r",
							"\r",
							"// Am Generating a random pet name from a list\r",
							"let petNames = [\"Bruno\", \"Charlie\", \"Max\", \"Rocky\", \"Buddy\", \"Coco\", \"Bella\"];\r",
							"let randomPetName = petNames[Math.floor(Math.random() * petNames.length)];\r",
							"\r",
							"// Am Generate a random photo URL\r",
							"let photoUrls = [\r",
							"    \"https://example.com/dog1.jpg\",\r",
							"    \"https://example.com/dog2.jpg\",\r",
							"    \"https://example.com/dog3.jpg\"\r",
							"];\r",
							"let randomPhotoUrl = photoUrls[Math.floor(Math.random() * photoUrls.length)];\r",
							"\r",
							"// Saving values in environment variables\r",
							"pm.environment.set(\"randomPetId\", randomPetId);\r",
							"pm.environment.set(\"randomPetName\", randomPetName);\r",
							"pm.environment.set(\"randomPhotoUrl\", randomPhotoUrl);\r",
							"\r",
							"console.log(\"Generated Pet ID:\", randomPetId);\r",
							"console.log(\"Generated Pet Name:\", randomPetName);\r",
							"console.log(\"Generated Photo URL:\", randomPhotoUrl);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": {{randomPetId}},\r\n  \"category\": { \"id\": 1, \"name\": \"Dogs\" },\r\n  \"name\": \"{{randomPetName}}\",\r\n  \"photoUrls\": [\"{{randomPhotoUrl}}\"],\r\n  \"tags\": [{ \"id\": 1, \"name\": \"friendly\" }],\r\n  \"status\": \"available\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseurl}}/pet",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"pet"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetTheCreatedPetfromDb",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(\"Using Pet ID:\", pm.environment.get(\"randomPetId\"));\r",
							"console.log(\"Expected Pet Name:\", pm.environment.get(\"randomPetName\"));\r",
							"\r",
							"// This is to Verify status code is 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// This is to Parse response\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// This is to Ensure the fetched Pet ID matches the stored one\r",
							"pm.test(\"Pet ID matches the stored one\", function () {\r",
							"    pm.expect(jsonData.id).to.eql(parseInt(pm.environment.get(\"randomPetId\")));\r",
							"});\r",
							"\r",
							"// This is Ensure pet name matches the expected value\r",
							"pm.test(\"Pet name matches the expected value\", function () {\r",
							"    let expectedName = pm.environment.get(\"randomPetName\");  // Get stored pet name\r",
							"    pm.expect(jsonData.name).to.eql(expectedName);\r",
							"});\r",
							"\r",
							"// This is to Ensure pet status is valid\r",
							"pm.test(\"Pet status is either 'available', 'pending', or 'sold'\", function () {\r",
							"    const validStatuses = [\"available\", \"pending\", \"sold\"];\r",
							"    pm.expect(validStatuses).to.include(jsonData.status);\r",
							"});\r",
							"\r",
							"// This is to Ensure category object exists with ID and name\r",
							"pm.test(\"Category details are present\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"category\");\r",
							"    pm.expect(jsonData.category).to.be.an(\"object\");\r",
							"    pm.expect(jsonData.category).to.have.property(\"id\");\r",
							"    pm.expect(jsonData.category).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"// This is Ensure photo URLs exist and are valid\r",
							"pm.test(\"Photo URLs should be an array and contain valid URLs\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"photoUrls\");\r",
							"    pm.expect(jsonData.photoUrls).to.be.an(\"array\").that.is.not.empty;\r",
							"    jsonData.photoUrls.forEach(url => {\r",
							"        pm.expect(url).to.be.a(\"string\").and.match(/^https?:\\/\\/.+/);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseurl}}/pet/{{randomPetId}}",
					"host": [
						"{{baseurl}}"
					],
					"path": [
						"pet",
						"{{randomPetId}}"
					]
				},
				"description": "Generated from cURL: curl --location 'https://petstore.swagger.io/v2/pet' \\\r\n--header 'Content-Type: application/json' \\\r\n--data '{\r\n    \"id\": 0,\r\n    \"category\": {\r\n        \"id\": 0,\r\n        \"name\": \"string\"\r\n    },\r\n    \"name\": \"doggie\",\r\n    \"photoUrls\": [\r\n        \"string\"\r\n    ],\r\n    \"tags\": [\r\n        {\r\n            \"id\": 0,\r\n            \"name\": \"string\"\r\n        }\r\n    ],\r\n    \"status\": \"available\"\r\n}'"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseurl",
			"value": "https://petstore.swagger.io/v2",
			"type": "string"
		}
	]
}